import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Paths for GNSS and low-cost data files
gnss_files = [
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\EgSA GNSS\Day.26\EgSA147-2024-05-26.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\EgSA GNSS\Day.27\EgSA148-2024-05-27.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\EgSA GNSS\Day.28\EgSA149-2024-05-28.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\EgSA GNSS\Day.29\EgSA150-2024-05-29.Cmn'
]

lowcost_files = [
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\Low-Cost GNSS\147\CARO147-2024-05-26.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\Low-Cost GNSS\148\CARO148-2024-05-27.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\Low-Cost GNSS\149\CARO149-2024-05-28.Cmn',
    r'F:\MathWorks_MATLAB_R2023a_v9.14.0.2206163\GNSS\Low-Cost GNSS\150\CARO150-2024-05-29.Cmn'
]

# Function to load and process data files
def load_data(files):
    all_data = []
    for file in files:
        data = pd.read_csv(file, sep='\s+', skiprows=5, header=None)
        all_data.append(data)
    return pd.concat(all_data, ignore_index=True)

# Load GNSS and low-cost data
gnss_allData = load_data(gnss_files)
lowcost_allData = load_data(lowcost_files)

# Convert Modified Julian Date to Julian Date and then to datetime
def mjd_to_datetime(mjd):
    jd = mjd + 2400000.5
    return pd.to_datetime(jd, origin='julian', unit='D')

gnss_time_ground = mjd_to_datetime(gnss_allData[0])
lowcost_time_ground = mjd_to_datetime(lowcost_allData[0])

gnss_Vtec = gnss_allData[8]
lowcost_Vtec = lowcost_allData[8]

gnss_Lat = gnss_allData[5]
lowcost_Lat = lowcost_allData[5]

# Create subplots
fig, axs = plt.subplots(3, 2, figsize=(15, 10))

# Subplot 1: VTEC over time for GNSS data
axs[0, 0].plot(gnss_time_ground, gnss_Vtec, 'b')
axs[0, 0].set_xlabel('Time')
axs[0, 0].set_ylabel('VTEC')
axs[0, 0].set_title('GNSS VTEC Over Time')
axs[0, 0].grid(True)

# Subplot 2: VTEC over time for low-cost data
axs[0, 1].plot(lowcost_time_ground, lowcost_Vtec, 'r')
axs[0, 1].set_xlabel('Time')
axs[0, 1].set_ylabel('VTEC')
axs[0, 1].set_title('Low-Cost VTEC Over Time')
axs[0, 1].grid(True)

# Subplot 3: Scatter plot and average VTEC for GNSS
sc1 = axs[1, 0].scatter(gnss_time_ground, gnss_Vtec, c=gnss_Lat, cmap='jet', s=10)
plt.colorbar(sc1, ax=axs[1, 0], label='Latitude')
axs[1, 0].set_xlabel('Time')
axs[1, 0].set_ylabel('VTEC')
axs[1, 0].set_title('GNSS VTEC with Latitude Color')
gnss_average_Vtec = gnss_allData.groupby(gnss_time_ground.dt.floor('min'))[8].mean()
axs[1, 0].plot(gnss_average_Vtec.index, gnss_average_Vtec.values, 'k-', linewidth=1.5)
axs[1, 0].legend(['Average VTEC'])

# Subplot 4: Scatter plot and average VTEC for low-cost
sc2 = axs[1, 1].scatter(lowcost_time_ground, lowcost_Vtec, c=lowcost_Lat, cmap='jet', s=10)
plt.colorbar(sc2, ax=axs[1, 1], label='Latitude')
axs[1, 1].set_xlabel('Time')
axs[1, 1].set_ylabel('VTEC')
axs[1, 1].set_title('Low-Cost VTEC with Latitude Color')
lowcost_average_Vtec = lowcost_allData.groupby(lowcost_time_ground.dt.floor('min'))[8].mean()
axs[1, 1].plot(lowcost_average_Vtec.index, lowcost_average_Vtec.values, 'k-', linewidth=1.5)
axs[1, 1].legend(['Average VTEC'])

# Subplot 5: Overlay average VTEC for GNSS and low-cost data
axs[2, 0].plot(gnss_average_Vtec.index, gnss_average_Vtec.values, 'b-', linewidth=1.5)
axs[2, 0].plot(lowcost_average_Vtec.index, lowcost_average_Vtec.values, 'r-', linewidth=1.5)
axs[2, 0].set_xlabel('Time')
axs[2, 0].set_ylabel('Average VTEC')
axs[2, 0].set_title('Average VTEC Comparison')
axs[2, 0].legend(['GNSS Average VTEC', 'Low-Cost Average VTEC'])
axs[2, 0].grid(True)

# Subplot 6: Smooth average VTEC for GNSS and low-cost data
gnss_smoothed_Vtec = gnss_average_Vtec.rolling(window=10).mean()
lowcost_smoothed_Vtec = lowcost_average_Vtec.rolling(window=10).mean()
axs[2, 1].plot(gnss_smoothed_Vtec.index, gnss_smoothed_Vtec.values, 'b-', linewidth=1.5)
axs[2, 1].plot(lowcost_smoothed_Vtec.index, lowcost_smoothed_Vtec.values, 'r-', linewidth=1.5)
axs[2, 1].set_xlabel('Time')
axs[2, 1].set_ylabel('Smoothed Average VTEC')
axs[2, 1].set_title('Smoothed Average VTEC Comparison')
axs[2, 1].legend(['GNSS Smoothed VTEC', 'Low-Cost Smoothed VTEC'])
axs[2, 1].grid(True)

plt.tight_layout()
plt.show()
